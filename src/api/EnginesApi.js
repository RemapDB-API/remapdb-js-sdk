/*
 * RemapDB REST API Documentation
 * Vehicle Tuning Database API - For Tuning services and Tuners.  Access comprehensive vehicle details, including types, manufacturers, models, engines, ECU and TCU info, tuning tools, dyno charts, and available tuning or remap stages with their performance gains. 
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Engine from '../model/Engine';
import EngineWTuning from '../model/EngineWTuning';
import Error from '../model/Error';

/**
* Engines service.
* @module api/EnginesApi
* @version 1.0
*/
export default class EnginesApi {

    /**
    * Constructs a new EnginesApi. 
    * @alias module:api/EnginesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getEngine operation.
     * @callback moduleapi/EnginesApi~getEngineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EngineWTuning{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show engine metadata along with its performance and tuning information
     * Show engine metadata along with its performance and tuning information.
     * @param {Number} engineId Engine ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.acceptLanguage Method accept custom language. Content of the header should be the code of the language you are requesting. E.g.: &#x60;en&#x60;. 
     * @param {module:api/EnginesApi~getEngineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEngine(engineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'engineId' is set
      if (engineId === undefined || engineId === null) {
        throw new Error("Missing the required parameter 'engineId' when calling getEngine");
      }

      let pathParams = {
        'engine_id': engineId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EngineWTuning;

      return this.apiClient.callApi(
        '/engines/{engine_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listEngines operation.
     * @callback moduleapi/EnginesApi~listEnginesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Engine>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show all engines from specific generation
     * Show all engines from specific generation.
     * @param {Number} generationId Generation ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.acceptLanguage Method accept custom language. Content of the header should be the code of the language you are requesting. E.g.: &#x60;en&#x60;. 
     * @param {module:api/EnginesApi~listEnginesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listEngines(generationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling listEngines");
      }

      let pathParams = {
        'generation_id': generationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Engine];

      return this.apiClient.callApi(
        '/engines/generation/{generation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}