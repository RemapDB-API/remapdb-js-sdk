/*
 * RemapDB REST API Documentation
 * Vehicle Tuning Database API - For Tuning services and Tuners.  Access comprehensive vehicle details, including types, manufacturers, models, engines, ECU and TCU info, tuning tools, dyno charts, and available tuning or remap stages with their performance gains. 
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RemapdbJsSdk);
  }
}(this, function(expect, RemapdbJsSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Engine', function() {
      beforeEach(function() {
        instance = new RemapdbJsSdk.Engine();
      });

      it('should create an instance of Engine', function() {
        // TODO: update the code to test Engine
        expect(instance).to.be.a(RemapdbJsSdk.Engine);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property slug (base name: "slug")', function() {
        // TODO: update the code to test the property slug
        expect(instance).to.have.property('slug');
        // expect(instance.slug).to.be(expectedValueLiteral);
      });

      it('should have the property engineCode (base name: "engine_code")', function() {
        // TODO: update the code to test the property engineCode
        expect(instance).to.have.property('engineCode');
        // expect(instance.engineCode).to.be(expectedValueLiteral);
      });

      it('should have the property year (base name: "year")', function() {
        // TODO: update the code to test the property year
        expect(instance).to.have.property('year');
        // expect(instance.year).to.be(expectedValueLiteral);
      });

      it('should have the property capacity (base name: "capacity")', function() {
        // TODO: update the code to test the property capacity
        expect(instance).to.have.property('capacity');
        // expect(instance.capacity).to.be(expectedValueLiteral);
      });

      it('should have the property cylinders (base name: "cylinders")', function() {
        // TODO: update the code to test the property cylinders
        expect(instance).to.have.property('cylinders');
        // expect(instance.cylinders).to.be(expectedValueLiteral);
      });

      it('should have the property engineType (base name: "engine_type")', function() {
        // TODO: update the code to test the property engineType
        expect(instance).to.have.property('engineType');
        // expect(instance.engineType).to.be(expectedValueLiteral);
      });

      it('should have the property fuel (base name: "fuel")', function() {
        // TODO: update the code to test the property fuel
        expect(instance).to.have.property('fuel');
        // expect(instance.fuel).to.be(expectedValueLiteral);
      });

      it('should have the property ecus (base name: "ecus")', function() {
        // TODO: update the code to test the property ecus
        expect(instance).to.have.property('ecus');
        // expect(instance.ecus).to.be(expectedValueLiteral);
      });

      it('should have the property tcus (base name: "tcus")', function() {
        // TODO: update the code to test the property tcus
        expect(instance).to.have.property('tcus');
        // expect(instance.tcus).to.be(expectedValueLiteral);
      });

      it('should have the property performance (base name: "performance")', function() {
        // TODO: update the code to test the property performance
        expect(instance).to.have.property('performance');
        // expect(instance.performance).to.be(expectedValueLiteral);
      });

    });
  });

}));
